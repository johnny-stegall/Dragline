@{
  ViewBag.Title = "AdapTable Unit Tests";
}

@section Scripts
{
  <script type="module" src="~/scripts/web-components/adaptable.js" data-cover></script>
}

<!--
  // TODO: Convert all qUnit tests into mocha/chutzpah tests
-->

<dragline-adaptable>
</dragline-adaptable>

<script type="text/javascript">
  let Setup =
  {
    Pets:
    [
      { "Type": "Lizard", "Breed": "Water Dragon", "Name": "Leviathan", "Acquisition Date": new Date("6/10/1993"), "Acquisition Age": .5, "How Acquired": "Purchased", "Acquisition Price": 40, "Loss Date": new Date("8/12/1998"), "Loss Reason": "Sold" },
      { "Type": "Dog", "Breed": "Rotweiler", "Name": "Hercules", "Acquisition Date": new Date("1/5/1993"), "Acquisition Age": 0.5, "How Acquired": "Purchased", "Acquisition Price": 600, "Loss Date": new Date("9/1/1998"), "Loss Reason": "Put down by step mom" },
      { "Type": "Dog", "Breed": "Rotweiler", "Name": "Mel", "Acquisition Date": new Date("4/2/1994"), "Acquisition Age": 0.5, "How Acquired": "Daughter of Hercules", "Acquisition Price": 0, "Loss Date": new Date("9/1/1998"), "Loss Reason": "Put down by step mom" },
      { "Type": "Scorpion", "Breed": "Emperor", "Name": "Sting", "Acquisition Date": new Date("11/4/1994"), "Acquisition Age": 1, "How Acquired": "Purchased", "Acquisition Price": 34.99, "Loss Date": new Date("4/10/1995"), "Loss Reason": "Black Widows" },
      { "Type": "Cat", "Breed": "Unknown", "Name": "Chocolate", "Acquisition Date": new Date("5/3/1998"), "Acquisition Age": 1, "How Acquired": "Found", "Acquisition Price": 0, "Loss Date": new Date("6/19/2012"), "Loss Reason": "Old Age" },
      { "Type": "Lizard", "Breed": "Asian Water Monitor", "Name": "Vincent", "Acquisition Date": new Date("6/6/1999"), "Acquisition Age": 0.5, "How Acquired": "Purchased", "Acquisition Price": 119.99, "Loss Date": new Date("5/20/2001"), "Loss Reason": "Ex-girlfriend let out" },
      { "Type": "Lizard", "Breed": "Leopard Gecko", "Name": "Phallic", "Acquisition Date": new Date("10/12/1999"), "Acquisition Age": 0.5, "How Acquired": "Purchased", "Acquisition Price": 29.99, "Loss Date": new Date("4/23/2012"), "Loss Reason": "Black Widows" },
      { "Type": "Lizard", "Breed": "Leopard Gecko", "Name": "Snarky", "Acquisition Date": new Date("10/12/1999"), "Acquisition Age": 0.5, "How Acquired": "Purchased", "Acquisition Price": 29.99, "Loss Date": new Date("4/23/2012"), "Loss Reason": "Black Widows" },
      { "Type": "Lizard", "Breed": "Leopard Gecko", "Name": "Twitch", "Acquisition Date": new Date("10/12/1999"), "Acquisition Age": 0.5, "How Acquired": "Purchased", "Acquisition Price": 29.99, "Loss Date": new Date("4/23/2012"), "Loss Reason": "Black Widows" },
      { "Type": "Ferret", "Breed": "", "Name": "Hoppy", "Acquisition Date": new Date("6/20/2000"), "Acquisition Age": 3, "How Acquired": "Given", "Acquisition Price": 0, "Loss Date": new Date("5/13/2001"), "Loss Reason": "Given away" },
      { "Type": "Ferret", "Breed": "", "Name": "Klepty", "Acquisition Date": new Date("6/20/2000"), "Acquisition Age": 3, "How Acquired": "Given", "Acquisition Price": 0, "Loss Date": new Date("5/13/2001"), "Loss Reason": "Given away" },
      { "Type": "Lizard", "Breed": "Double Crested Green Basilisk", "Name": "Dumbass", "Acquisition Date": new Date("9/13/2001"), "Acquisition Age": 0.5, "How Acquired": "Purchased", "Acquisition Price": 149.99, "Loss Date": new Date("1/28/2003"), "Loss Reason": "Died" },
      { "Type": "Cat", "Breed": "Smoosh Face Tabby", "Name": "Clyde", "Acquisition Date": new Date("10/20/2002"), "Acquisition Age": 4, "How Acquired": "Adopted", "Acquisition Price": 120, "Loss Date": new Date("2/1/2003"), "Loss Reason": "Given back" },
      { "Type": "Cat", "Breed": "Black Tabby", "Name": "Calysto", "Acquisition Date": new Date("10/20/2002"), "Acquisition Age": 4, "How Acquired": "Adopted", "Acquisition Price": 120, "Loss Date": new Date("2/1/2003"), "Loss Reason": "Given back" },
      { "Type": "Bird", "Breed": "Eclectus", "Name": "Xanth", "Acquisition Date": new Date("4/13/2003"), "Acquisition Age": 1, "How Acquired": "Purchased", "Acquisition Price": 1099, "Loss Date": new Date("8/19/2004"), "Loss Reason": "Given away" },
      { "Type": "Cat", "Breed": "Unknown", "Name": "Jaz", "Acquisition Date": new Date("7/13/2003"), "Acquisition Age": 3, "How Acquired": "Adopted", "Acquisition Price": 120, "Loss Date": new Date("9/9/2004"), "Loss Reason": "Put down due to IBD" },
      { "Type": "Bird", "Breed": "Greenwing Macaw", "Name": "Trixy", "Acquisition Date": new Date("2/20/2005"), "Acquisition Age": 0.5, "How Acquired": "Purchased", "Acquisition Price": 1300, "Loss Date": new Date(""), "Loss Reason": "" },
      { "Type": "Lizard", "Breed": "Madagascar Crested Gecko", "Name": "Leather", "Acquisition Date": new Date("11/3/2006"), "Acquisition Age": 1, "How Acquired": "Purchased", "Acquisition Price": 39.99, "Loss Date": new Date("4/23/2012"), "Loss Reason": "Black Widows" },
      { "Type": "Lizard", "Breed": "Madagascar Crested Gecko", "Name": "Suede", "Acquisition Date": new Date("11/3/2006"), "Acquisition Age": 1, "How Acquired": "Purchased", "Acquisition Price": 0, "Loss Date": new Date("4/23/2012"), "Loss Reason": "Black Widows" },
      { "Type": "Lizard", "Breed": "Madagascar Crested Gecko", "Name": "Tailless", "Acquisition Date": new Date("11/3/2006"), "Acquisition Age": 1, "How Acquired": "Purchased", "Acquisition Price": 0, "Loss Date": new Date("5/30/2012"), "Loss Reason": "Let go" },
      { "Type": "Snake", "Breed": "Boa Constrictor", "Name": "Knot", "Acquisition Date": new Date("2/4/2007"), "Acquisition Age": 0.5, "How Acquired": "Purchased", "Acquisition Price": 89.99, "Loss Date": new Date("5/5/2012"), "Loss Reason": "Sold" },
      { "Type": "Lizard", "Breed": "Australian Frilled Dragon", "Name": "Zeal", "Acquisition Date": new Date("10/5/2008"), "Acquisition Age": 1, "How Acquired": "Purchased", "Acquisition Price": 99.98, "Loss Date": new Date("4/23/2012"), "Loss Reason": "Black Widows" },
      { "Type": "Cat", "Breed": "Silver Bengal", "Name": "Phoebe", "Acquisition Date": new Date("3/3/2010"), "Acquisition Age": 0.5, "How Acquired": "Purchased", "Acquisition Price": 500, "Loss Date": new Date("4/30/2012"), "Loss Reason": "Gave away" },
      { "Type": "Snake", "Breed": "Ball Python", "Name": "Morningstar", "Acquisition Date": new Date("3/9/2010"), "Acquisition Age": 4, "How Acquired": "Purchased", "Acquisition Price": 129.99, "Loss Date": new Date("4/23/2012"), "Loss Reason": "Black Widows" },
      { "Type": "Cat", "Breed": "[F1] Savannah", "Name": "Ragnarok", "Acquisition Date": new Date("9/13/2011"), "Acquisition Age": 1.5, "How Acquired": "Purchased", "Acquisition Price": 400, "Loss Date": new Date(""), "Loss Reason": "" },
      { "Type": "Cat", "Breed": "[F4] Bengal", "Name": "Catniss", "Acquisition Date": new Date("2/20/2016"), "Acquisition Age": 0.25, "How Acquired": "Purchased", "Acquisition Price": 800, "Loss Date": new Date(""), "Loss Reason": "" }
    ],

    calculateAggregates: function()
    {
      let aggregates = {};
      let groupedValues = {};

      for (let petIndex = 0; petIndex < this.Pets.length; petIndex++)
      {
        if (!groupedValues[this.Pets[petIndex].Type])
          groupedValues[this.Pets[petIndex].Type] = {};

        for (let property in this.Pets[petIndex])
        {
          if (typeof (this.Pets[petIndex][property]) === "number")
          {
            if (!groupedValues[this.Pets[petIndex].Type][property])
              groupedValues[this.Pets[petIndex].Type][property] = [];

            groupedValues[this.Pets[petIndex].Type][property].push(this.Pets[petIndex][property]);
          }
        }
      }

      for (let type in groupedValues)
      {
        aggregates[type] = {};

        for (let property in groupedValues[type])
        {
          aggregates[type][property] = 0;

          for (let valueIndex = 0; valueIndex < groupedValues[type][property].length; valueIndex++)
            aggregates[type][property] += groupedValues[type][property][valueIndex];

          aggregates[type][property] /= groupedValues[type][property].length;
        }
      }

      return aggregates;
    },

    determineIfGroupable: function(property)
    {
      switch (property)
      {
        case "Name":
        case "Acquisition Date":
        case "Acquisition Price":
        case "Loss Date":
          return false;
        default:
          return true;
      }
    },

    determineIfHidable: function(property)
    {
      if (property === "Name" || property === "Type")
        return false;
      else
        return true;
    },

    determineIfSortable: function(property)
    {
      if (property === "Loss Reason")
        return false;
      else
        return true;
    },

    getColumns: function()
    {
      let columns = [];

      for (let property in this.Pets[0])
      {
        columns.push(
        {
          "Aggregate": typeof (this.Pets[0][property]) === "number" ? "Average" : "None",
          "DataType": this.getDataType(this.Pets[0][property]),
          "Header": property,
          "IsFilterable": true,
          "IsGroupable": this.determineIfGroupable(property),
          "IsHidable": this.determineIfHidable(property),
          "IsMovable": true,
          "IsSortable": this.determineIfSortable(property),
          "IsVisible": true,
          "Name": property.replace(" ", "")
        });
      }

      columns.push({ "Aggregate": "None", "DataType": "None", "Header": null, "IsFilterable": false, "IsGroupable": false, "IsHidable": false, "IsMovable": false, "IsSortable": false, "IsVisible": true, "Name": null });

      return columns;
    },

    getDataType: function(value)
    {
      switch (typeof (value))
      {
        case "string":
          return "String";
        case "number":
          return "Numeric";
        default:
          if (value.getDate)
            return "Timestamp";
          else
            return "None";
      }
    },

    getFilterValues: function()
    {
      let filterValues = {};

      for (let property in this.Pets)
      {
        filterValues[property] = [];

        for (let petIndex = 0; petIndex < this.Pets.length; petIndex++)
        {
          if (filterValues[property].indexOf(this.Pets[petIndex][property]) < 0)
            filterValues[property].push(this.Pets[petIndex][property]);
        }
      }
    },

    getPagesOfData: function()
    {
      let pages = [];

      for (let pageIndex = 0; pageIndex < this.Pets.length / 10; pageIndex++)
      {
        pages.push(
        {
          "Items": Setup.Pets.slice((pageIndex * 10), ((pageIndex + 1) * 10))
        });
      }

      return pages;
    }
  };

  document.addEventListener("DOMContentLoaded", () =>
  {
    let adaptable = document.querySelector("dragline-adaptable");
    adaptable.GetDataCallback = () =>
    {
      return Setup.Pets;
    };
  });

  // Setup some cached data
  //let AdapTableCache = { Instances: [] };
  //let AdapTableInstance = {};
  //AdapTableInstance.Layout = {};
  //AdapTableInstance.Layout.Columns = Setup.getColumns();
  //AdapTableInstance.Layout.Query = { "Filters": [], "Groups": ["Type"], "PageSize": 10, "PageIndex": 0, "Sort": "Acquisition Date", "SortDirection": null };
  //AdapTableInstance.Data = {};
  //AdapTableInstance.Data.Aggregates = Setup.calculateAggregates();
  //AdapTableInstance.Data.FilterValues = Setup.getFilterValues();
  //AdapTableInstance.Data.TotalItems = Setup.Pets.length;
  //AdapTableInstance.Data.Pages = Setup.getPagesOfData();
  //AdapTableCache.Instances.push(AdapTableInstance);
  //localStorage.setItem("AdapTable: " + document.location, JSON.stringify(AdapTableCache));

  /****************************************************************************
  * Cleanup after each test.
  ****************************************************************************/
  //QUnit.testDone(function()
  //{
  //  let tblAdapTable = $("#tblAdapTable");
  //  tblAdapTable.AdapTable("destroy");
  //  tblAdapTable.children("tbody").empty();
  //  ko.cleanNode(tblAdapTable[0]);
  //  localStorage.setItem('AdapTable: ' + document.location, JSON.stringify(AdapTableCache));
  //});

  //QUnit.test("AdapTable Constructor - Basic", function(assert)
  //{
  //  // Arrange
  //  let dependentScripts = assert.async();
  //  let tblAdapTable = $("#tblAdapTable");
  //  let ViewModel =
  //  {
  //    Employees: ko.observable(AdapTableInstance.Data.Pages[0])
  //  };

  //  ko.applyBindings(ViewModel, tblAdapTable[0]);

  //  // Act
  //  tblAdapTable.AdapTable(
  //  {
  //    CanChangeView: false,
  //    CanFilter: false,
  //    CanGroup: false,
  //    CanMoveColumns: false,
  //    CanSearch: false,
  //    CanSort: false
  //  });

  //  // Assert
  //  assert.ok(AdapTable.ScriptLoader);

  //  window.setTimeout(function()
  //  {
  //    assert.ok(AdapTable.addActionButton);
  //    assert.ok(AdapTable.cacheLayout);

  //    let adaptableContainer = tblAdapTable.parent();
  //    assert.equal(adaptableContainer.prop("tagName").toUpperCase(), "DIV");
  //    assert.ok(adaptableContainer.hasClass("AdapTable"));

  //    let headerSection = tblAdapTable.next();
  //    assert.ok(headerSection.prop("tagName").toUpperCase(), "SECTION");

  //    let footerSection = tblAdapTable.prev();
  //    assert.ok(footerSection.prop("tagName").toUpperCase(), "SECTION");

  //    let divActions = footerSection.children("div.Actions");
  //    assert.equal(divActions.length, 1);
  //    assert.equal(divActions.children("i").length, 0);

  //    let adaptableMenu = adaptableContainer.children().last();
  //    assert.equal(adaptableMenu.prop("tagName").toUpperCase(), "DIV");
  //    assert.equal(adaptableMenu.attr("role"), "menu");

  //    dependentScripts();
  //  }, 1000);
  //});

  //QUnit.test("AdapTable Constructor - Full", function(assert)
  //{
  //  // Arrange
  //  let dependentScripts = assert.async();
  //  let tblAdapTable = $("#tblAdapTable");
  //  let ViewModel =
  //  {
  //    Employees: ko.observable(AdapTableInstance.Data.Pages[0])
  //  };

  //  ko.applyBindings(ViewModel, tblAdapTable[0]);

  //  // Act
  //  tblAdapTable.AdapTable(
  //  {
  //    CanChangeView: true,
  //    CanFilter: true,
  //    CanGroup: true,
  //    CanMoveColumns: true,
  //    CanSearch: true,
  //    CanSort: true,
  //    ExcludeFooter: true,
  //    ExportToExcelUrl: "http://localhost:40000/excel",
  //    ExportToPdfUrl: "http://localhost:40000/pdf",
  //    MovableColumns: ["FirstName", "LastName", "Email"],
  //    Paging: "Pager",
  //    ScriptExpiration: 48
  //  });

  //  // Assert
  //  window.setTimeout(function()
  //  {
  //    let adaptable = tblAdapTable.data("AdapTable");
  //    assert.equal(adaptable.Options.ExcludeFooter, true);
  //    assert.equal(adaptable.Options.ScriptExpiration, 48);

  //    let footerSection = tblAdapTable.prev();
  //    assert.ok(footerSection.prop("tagName").toUpperCase(), "SECTION");

  //    let divActions = footerSection.children("div.Actions");
  //    assert.equal(divActions.length, 1);
  //    assert.equal(divActions.children("i").length, 3);
  //    assert.ok(divActions.children("i:first").hasClass("fa-file-excel-o"));
  //    assert.ok(divActions.children("i:nth-child(2)").hasClass("fa-file-pdf-o"));

  //    let layout = tblAdapTable.data("Layout");
  //    for (var columnIndex = 0; columnIndex < layout.Columns.length; columnIndex++)
  //    {
  //      if (adaptable.Options.MovableColumns.indexOf(layout.Columns[columnIndex].Name) > -1)
  //        assert.ok(layout.Columns[columnIndex].IsHidable);
  //      else
  //        assert.ok(!layout.Columns[columnIndex].IsHideable);
  //    }

  //    assert.ok(AdapTable.Filtering);
  //    assert.ok(AdapTable.Grouping);
  //    assert.ok(AdapTable.Paging);
  //    assert.ok(AdapTable.Positioning);
  //    assert.ok(AdapTable.Sortable);
  //    assert.ok(AdapTable.Sorting);
  //    assert.ok(AdapTable.Views);

  //    dependentScripts();
  //  }, 1000);
  //});

  //QUnit.test("AdapTable Destructor", function(assert)
  //{
  //  // Arrange
  //  let dependentScripts = assert.async();
  //  let tblAdapTable = $("#tblAdapTable");
  //  let ViewModel =
  //  {
  //    Employees: ko.observable(AdapTableInstance.Data.Pages[0])
  //  };

  //  ko.applyBindings(ViewModel, tblAdapTable[0]);

  //  // Act
  //  tblAdapTable.AdapTable(
  //  {
  //    CanChangeView: false,
  //    CanFilter: false,
  //    CanGroup: false,
  //    CanMoveColumns: false,
  //    CanSearch: false,
  //    CanSort: false
  //  });

  //  // Assert
  //  window.setTimeout(function()
  //  {
  //    tblAdapTable.AdapTable("destroy");

  //    assert.equal(tblAdapTable.data("AdapTable"), null);
  //    assert.equal(tblAdapTable.data("Layout"), null);
  //    assert.equal(tblAdapTable.data("Data"), null);
  //    assert.equal($._data(tblAdapTable[0], "events"), null);
  //    assert.ok(tblAdapTable.next().prop("tagName").toUpperCase() !== "SECTION");
  //    assert.ok(tblAdapTable.prev().prop("tagName").toUpperCase() !== "SECTION");
  //    assert.ok(!tblAdapTable.parent().hasClass("AdapTable"));

  //    dependentScripts();
  //  }, 1000);
  //});

  //QUnit.test("AdapTable Export Buttons", function(assert)
  //{
  //  // Arrange
  //  let dependentScripts = assert.async();
  //  let tblAdapTable = $("#tblAdapTable");

  //  // Act
  //  $("#tblAdapTable").AdapTable(
  //  {
  //    CanChangeView: false,
  //    CanFilter: false,
  //    CanGroup: false,
  //    CanMoveColumns: false,
  //    CanSearch: false,
  //    CanSort: false,
  //    ExportToExcelUrl: document.location,
  //    ExportToPdfUrl: document.location
  //  });

  //  // Assert
  //  window.setTimeout(function()
  //  {
  //    assert.equal(tblAdapTable.prev().find("i.fa-file-excel-o").length, 1);
  //    assert.equal(tblAdapTable.prev().find("i.fa-file-pdf-o").length, 1);

  //    dependentScripts();
  //  }, 1500);
  //});
</script>
