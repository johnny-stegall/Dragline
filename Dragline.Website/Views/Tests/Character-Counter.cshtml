@{
    ViewBag.Title = "Character Counter Unit Tests";
}

@section Styles
{
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/qunit/1.16.0/qunit.min.css" />
}

@section Scripts
{
  <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/qunit/1.16.0/qunit.min.js"></script>
  <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/blanket.js/1.1.4/blanket.min.js"></script>
  <script src="~/scripts/dragline/jQuery/character-counter.js" data-cover></script>
}

<div id="qunit"></div>

<div class="Form-Group">
  <label for="txtCount"></label>
  <input type="text" id="txtCount" maxlength="50" />
  <label id="lblCount" for="txtCount"></label>
</div>

<div class="Form-Group">
  <label for="txtBigCount"></label>
  <textarea id="txtBigCount" maxlength="10000"></textarea>
  <label for="txtBigCount" data-counter data-options="{ 'Warning': '#FF6600' }"></label>
</div>

<div class="Form-Group">
  <label for="txtBadLabel"></label>
  <textarea id="txtBadLabel"></textarea>
  <label id="lblBadLabel"></label>
</div>

<div class="Form-Group">
  <label id="lblMissing" for="txtMissing"></label>
</div>

<script type="text/javascript">
  /****************************************************************************
  * Cleanup after each test.
  ****************************************************************************/
  QUnit.testDone(function()
  {
    $("#txtCount").val("");

    var lblCount = $("#lblCount");
    if (lblCount.data("Character Counter"))
      lblCount.CharacterCounter("destroy");
  });

  QUnit.test("Character Counter Constructor", function(assert)
  {
    // Arrange
    var lblCount = $("#lblCount");
    var txtCount = $("#txtCount");

    // Act
    lblCount.CharacterCounter();

    // Assert
    assert.ok(lblCount.hasClass("Counter"));
    assert.ok(lblCount.data("Character Counter"));
    assert.equal(lblCount.parent().css("overflow-x"), "hidden");
    assert.equal(lblCount.text(), "Characters Remaining: " + txtCount.attr("maxlength"));
    assert.ok($._data(txtCount[0], "events"));
  });

  QUnit.test("Character Counter Constructor: No Label", function(assert)
  {
    // Arrange
    var lblCount = $("#lblBadLabel");

    // Act & Assert
    assert.throws(function()
    {
      lblCount.CharacterCounter();
    }, "The for attribute was not specified.");
  });

  QUnit.test("Character Counter Constructor: No Element", function(assert)
  {
    // Arrange
    var lblCount = $("#lblMissing");

    // Act & Assert
    assert.throws(function()
    {
      lblCount.CharacterCounter();
    }, "The target element for character counting wasn't found.");
  });

  QUnit.test("Character Counter Constructor: Declarative", function(assert)
  {
    // Arrange
    var waitForReady = assert.async();
    var lblBigCount = $("label[data-counter]");
    var txtBigCount = $("#txtBigCount");

    // Assert
    $(document).ready(function()
    {
      assert.ok(lblBigCount.data("Character Counter"));
      assert.equal(lblBigCount.data("Character Counter").Options.Warning, "#FF6600");

      waitForReady();
    });
  });

  QUnit.test("Character Counter Destructor", function(assert)
  {
    // Arrange
    var lblBigCount = $("label[data-counter]");
    var lblCount = $("#lblCount");
    lblCount.CharacterCounter();

    // Act
    lblBigCount.CharacterCounter("destroy");
    lblCount.CharacterCounter("destroy");

    // Assert
    assert.ok(!lblBigCount.hasClass("Counter"));
    assert.ok(!lblBigCount.data("Character Counter"));
    assert.notEqual(lblBigCount.parent().css("overflow-x"), "hidden");
    assert.ok(!lblCount.hasClass("Counter"));
    assert.ok(!lblCount.data("Character Counter"));
    assert.notEqual(lblCount.parent().css("overflow-x"), "hidden");
    assert.equal($._data($("#txtBigCount")[0], "events"), null);
  });

  QUnit.test("Character Counter Toggle", function(assert)
  {
    // Arrange
    var lblCount = $("#lblCount");
    var txtCount = $("#txtCount");

    lblCount.CharacterCounter();

    // Act
    txtCount.focus();
    var isCounting = lblCount.hasClass("Counting");

    txtCount.blur();
    var stoppedCounting = !lblCount.hasClass("Counting");

    // Assert
    assert.ok(isCounting);
    assert.ok(stoppedCounting);
  });

  QUnit.test("updateCount > 50%", function(assert)
  {
    // Arrange
    var lblCount = $("#lblCount");
    var txtCount = $("#txtCount");
    lblCount.CharacterCounter();

    // Act
    txtCount
      .val("1234567890")
      .keyup();

    // Assert
    assert.equal(lblCount.text(), "Characters Remaining: 40");
    assert.equal(lblCount.css("color"), "rgb(122, 193, 67)");
  });

  QUnit.test("updateCount < 50%", function(assert)
  {
    // Arrange
    var lblCount = $("#lblCount");
    var txtCount = $("#txtCount");
    lblCount.CharacterCounter();

    // Act
    txtCount
      .val("1234567890123456789012345")
      .keyup();

    // Assert
    assert.equal(lblCount.text(), "Characters Remaining: 25");
    assert.equal(lblCount.css("color"), "rgb(168, 158, 52)");
  });

  QUnit.test("updateCount < 75%", function(assert)
  {
    // Arrange
    var lblCount = $("#lblCount");
    var txtCount = $("#txtCount");
    var counter = lblCount.CharacterCounter();

    // Act
    txtCount
      .val("12345678901234567890123456789012345678")
      .keyup();

    // Assert
    assert.equal(lblCount.text(), "Characters Remaining: 12");
    assert.equal(lblCount.css("color"), "rgb(239, 62, 66)");
  });
</script>