@{
    ViewBag.Title = "Password Strength Unit Tests";
}

@section PageStyles
{
  <link rel="stylesheet" href="//code.jquery.com/qunit/qunit-1.15.0.css" />
}

@section PageScripts
{
  <script type="text/javascript" src="//code.jquery.com/qunit/qunit-1.16.0.js"></script>
  <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/blanket.js/1.1.4/blanket.min.js"></script>
  <script src="~/scripts/password-strength.js" data-cover></script>
}

<div id="qunit"></div>

<form>
  <fieldset>
    <div class="Form-Group">
      <input type="password" id="txtPassword" placeholder="Password" />
    </div>

    <div class="Form-Group">
      <input type="password" id="txtConfirmation" placeholder="Confirm password" />
    </div>
  </fieldset>
</form>

<script type="text/javascript">
  /****************************************************************************
  * Cleanup after each test.
  ****************************************************************************/
  QUnit.testDone(function()
  {
    var txtPassword = $("#txtPassword");
    if (txtPassword.data("PasswordStrength"))
      txtPassword.PasswordStrength("destroy");

    txtPassword.val("");
    $("#txtConfirmation").val("");
  });

  QUnit.test("Password Strength Constructor", function(assert)
  {
    // Arrange
    var txtPassword = $("#txtPassword");

    // Act
    txtPassword.PasswordStrength();
    var divStrength = txtPassword.next();
    var strengthWords = divStrength.children().first();
    var strengthMeter = divStrength.children().last();

    // Assert
    assert.ok(txtPassword.data("Password Strength"));
    assert.equal(txtPassword.parent().prop("tagName").toUpperCase(), "DIV");
    assert.ok(txtPassword.parent().hasClass("PasswordStrength"));
    assert.equal(divStrength.prop("tagName").toUpperCase(), "DIV");
    assert.ok(divStrength.hasClass("Strength"));
    assert.equal(strengthWords.prop("tagName").toUpperCase(), "SMALL");
    assert.equal(strengthWords.children().first().prop("tagName").toUpperCase(), "STRONG");
    assert.equal(strengthWords.children().first().text(), "Strength:");
    assert.equal(strengthWords.children().last().prop("tagName").toUpperCase(), "SPAN");
    assert.notEqual(strengthWords.children().last().text(), "");
    assert.equal(strengthMeter.prop("tagName").toUpperCase(), "DIV");
    assert.ok(strengthMeter.hasClass("Meter"));
    assert.equal(strengthMeter.children().first().prop("tagName").toUpperCase(), "SPAN");
    assert.ok($._data(txtPassword[0], "events"));
  });

  QUnit.test("Password Strength With Confirmation", function(assert)
  {
    // Arrange
    var txtPassword = $("#txtPassword");
    var txtConfirmation = $("#txtConfirmation");
    var invalidCallbackInvoked = false;
    var validCallbackInvoked = false;
    var isConfirmationHidden = false;

    // Act
    txtPassword.PasswordStrength(
    {
      Confirmation:
      {
        Element: "#txtConfirmation",
        InvalidCallback: function()
        {
          invalidCallbackInvoked = true;
        },
        ValidCallback: function()
        {
          validCallbackInvoked = true;
        }
      }
    });

    var divStrength = txtPassword.next();
    var isStrengthVisible = false;
    var isStrengthHidden = false;

    txtPassword.val("John");
    txtPassword.keyup();
    isStrengthVisible = divStrength.is(":visible");
    txtConfirmation.val("John");
    txtConfirmation.keyup();
    txtPassword.val("");
    txtConfirmation.val("");
    isConfirmationHidden = txtConfirmation.next().is(":visible");

    txtPassword.blur();
    isStrengthHidden = txtPassword.is(":visible");

    // Assert
    assert.equal(txtConfirmation.parent().prop("tagName").toUpperCase(), "DIV");
    assert.ok(txtConfirmation.parent().hasClass("PasswordStrength"));
    assert.ok($._data(txtPassword[0], "events"));
    assert.ok($._data(txtConfirmation[0], "events"));
    assert.ok(invalidCallbackInvoked);
    assert.ok(validCallbackInvoked);
    assert.ok(isStrengthVisible);
    assert.ok(isStrengthHidden);
  });

  QUnit.test("Password Strength Destructor", function(assert)
  {
    // Arrange
    var txtPassword = $("#txtPassword");
    txtPassword.PasswordStrength(
    {
      Confirmation:
      {
        Element: "#txtConfirmation",
        InvalidCallback: function()
        {
          invalidCallbackInvoked = true;
        },
        ValidCallback: function()
        {
          validCallbackInvoked = true;
        }
      }
    });

    var divStrength = txtPassword.next();

    // Act
    txtPassword.PasswordStrength("destroy");

    // Assert
    assert.equal(txtPassword.data("Password Strength"), null);
    assert.equal(txtPassword.parent().prop("tagName").toUpperCase(), "DIV");
    assert.equal($._data(txtPassword[0], "events"), null);
    assert.ok(!txtPassword.parent().hasClass("PasswordStrength"));
    assert.ok(!$("#txtConfirmation").parent().hasClass("PasswordStrength"));
    assert.notEqual(divStrength, txtPassword.next());
  });

  QUnit.test("Password Strength Patterns", function(assert)
  {
    // Arrange
    var fairText, moderateText, strongText;
    var isFair, isModerate, isStrong;
    var txtPassword = $("#txtPassword");
    txtPassword.PasswordStrength({ FairPattern: /[a-z]+/, GoodPattern: /[a-z]+[0-9]+/, StrongPattern: /[A-Z]+[a-z]+[0-9]+/ });
    var divStrength = txtPassword.next();

    // Act
    txtPassword.val("asdf");
    txtPassword.keyup();
    fairText = txtPassword.parent().find("small > span").text();
    isFair = divStrength.hasClass("Fair");

    txtPassword.val("qwerty123");
    txtPassword.keyup();
    moderateText = txtPassword.parent().find("small > span").text();
    isModerate = divStrength.hasClass("Moderate");

    txtPassword.val("ZXCVqwerty123");
    txtPassword.keyup();
    strongText = txtPassword.parent().find("small > span").text();
    isStrong = divStrength.hasClass("Strong");

    // Assert
    assert.equal(fairText, "Fair");
    assert.ok(isFair);
    assert.equal(moderateText, "Moderate");
    assert.ok(isModerate);
    assert.equal(strongText, "Strong");
    assert.ok(isStrong);
  });
</script>