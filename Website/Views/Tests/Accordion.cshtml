@{
  ViewBag.Title = "Accordion Unit Tests";
}

@section PageStyles
{
  <link rel="stylesheet" href="~/css/accordion.css" />
  <link rel="stylesheet" href="//code.jquery.com/qunit/qunit-1.15.0.css" />
  <link rel="stylehseet" href="//cdnjs.cloudflare.com/ajax/libs/blanket.js/1.1.4/blanket.min.js" />
}

@section PageScripts
{
  <script type="text/javascript" src="//code.jquery.com/qunit/qunit-1.16.0.js"></script>
  <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/blanket.js/1.1.4/blanket.min.js"></script>
  <script src="~/scripts/accordion.js" data-cover></script>
}

<div id="qunit"></div>

<hr />

<div id="divAccordion">
  <header>Key 1</header>
  <section>Content 1</section>
  <header>Key 2</header>
  <section>
    <p>Content 2</p>
  </section>
  <header>Key 3</header>
  <section>
    <strong>Content 3</strong>
  </section>
</div>

<div id="divNotAccordion">
  <dl>
    <dt>Key 1</dt>
    <dd>Content 1</dd>
    <dt>Key 2</dt>
    <dd>Content 2</dd>
    <dt>Key 3</dt>
    <dd>Content 3</dd>
    <dt>Key 4</dt>
    <dd>Content 4</dd>
    <dt>Key 5</dt>
    <dd>Content 5</dd>
  </dl>
</div>

<script type="text/javascript">
  /****************************************************************************
  * Cleanup after each test.
  ****************************************************************************/
  QUnit.testDone(function()
  {
    var divAccordion = $("#divAccordion");
    if (divAccordion.data("Accordion"))
      divAccordion.Accordion("destroy");
  });

  QUnit.test("Accordion Constructor", function(assert)
  {
    // Arrange
    var divAccordion = $("#divAccordion");

    // Act
    divAccordion.Accordion();

    // Assert
    assert.ok(divAccordion.data("Accordion"));
    assert.ok(divAccordion.hasClass("Accordion-Vertical"));
    assert.ok(divAccordion.children("header:first-child").hasClass("Expanded"));
    assert.ok($._data(divAccordion[0], "events"));
  });

  QUnit.test("Accordion Constructor: Horizontal", function(assert)
  {
    // Arrange
    var divAccordion = $("#divAccordion");

    // Act
    divAccordion.Accordion({ Orientation: "horizontal" });

    // Assert
    assert.ok(divAccordion.hasClass("Accordion-Horizontal"));
  });

  QUnit.test("Accordion Constructor: No Keys", function(assert)
  {
    // Arrange
    var divNotAccordion = $("#divNotAccordion");

    // Act & Assert
    assert.throws(divNotAccordion.Accordion, "No keys could be found.");
  });

  QUnit.test("Accordion Constructor: Multiple Expanded Keys", function(assert)
  {
    // Arrange
    var divAccordion = $("#divAccordion");
    divAccordion.children("header").addClass("Expanded");

    // Act & Assert
    assert.throws(divAccordion.Accordion, "Only one key on an accordion can be expanded.");

    // Cleanup
    divAccordion.children("header").removeClass("Expanded");
  });

  QUnit.test("Accordion Destructor", function(assert)
  {
    // Arrange
    var divAccordion = $("#divAccordion");
    divAccordion.Accordion();

    // Act
    divAccordion.Accordion("destroy");

    // Act & Assert
    assert.ok(!divAccordion.data("Accordion"));
    assert.equal($._data(divAccordion[0], "events"), null);
    assert.ok(!divAccordion.hasClass("Accordion-Vertical"));
    assert.ok(!divAccordion.hasClass("Accordion-Horizontal"));
    assert.ok(!divAccordion.children().hasClass("Expanded"));
    assert.ok(divAccordion.children("header").each(function()
    {
      return typeof (this.onclick) === "undefined";
    }));
  });

  QUnit.test("Collapsible Accordion", function(assert)
  {
    // Arrange
    var divAccordion = $("#divAccordion");
    var initialExpandedKey = divAccordion.children("header.Expanded");
    divAccordion.Accordion({ Collapsible: true });

    // Act
    divAccordion.children("header.Expanded").click();

    // Assert
    assert.equal(divAccordion.children("header.Expanded").length, 0);
  });

  QUnit.test("Toggle on Click", function(assert)
  {
    // Arrange
    var divAccordion = $("#divAccordion");
    divAccordion.children().removeClass("Expanded");
    divAccordion.Accordion();

    var initialExpandedKey = divAccordion.children("header:nth-child(2)").addClass("Expanded");

    // Act
    divAccordion.children("header:not(.Expanded)").first().click();

    // Assert
    assert.ok(!initialExpandedKey.hasClass("Expanded"));
    assert.equal(divAccordion.children("header.Expanded").length, 1);
  });

  QUnit.test("Toggle on Hover", function(assert)
  {
    // Arrange
    var divAccordion = $("#divAccordion");

    // Act
    divAccordion.Accordion({ HoverToggle: true });

    // Assert
    assert.ok(divAccordion.children("header").each(function()
    {
      return typeof (this).onmouseenter === "function";
    }));
  });
</script>