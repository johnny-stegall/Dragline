
@{
  ViewBag.Title = "Components";
}

<dragline-index class="Width-25" offset="60"></dragline-index>

<div class="Width-75">
  <h1>Components</h1>

  <article>
    <h2 id="Accordions">Accordions</h2>

    <p>
      Accordions are used to save screen real estate by showing related content
      on the same page without showing it all at the same time. They should be
      used when content can be displayed in steps, such as registration where
      one step must be completed before moving on to another step. Rarely should
      more than a one accordion be placed on a screen.
    </p>

    <p>
      Accordions expect pairs of <code>&lt;header&gt;</code> and
      <code>&lt;section&gt;</code> child elements that make up the "keys" of
      the accordion.
    </p>

    <dragline-accordion>
      <header>Step 1: Identification</header>
      <section>There's nothing here to see.</section>
      <header>Step 2: Shipping Address</header>
      <section>Enter shipping address here.</section>
      <header>Step 3: Billing Address</header>
      <section>Might be the same as shipping and can be skipped.</section>
      <header>Step 4: Payment</header>
      <section>You wish there were payment details here.</section>
      <header>Step 5: Notes</header>
      <section>Notes to the shipping carrier that'll probably be ignored.</section>
    </dragline-accordion>

    <p>
      Accordions support the following custom attributes:
    </p>

    <ul>
      <li>
        <code>collapsible</code> - A boolean attribute that when present
        specifies the accordion can be completely collapsed.
      </li>
      <li>
        <code>expanded</code> - A boolean attribute applied to any
        <code>&lt;header&gt;</code> element that specifies that section should
        be expanded.
      </li>
      <li>
        <code>orientation</code> - Specifies the orientation of the
        accordion. Supported values are "vertical" and "horizontal"; the
        default is "vertical".
      </li>
      <li>
        <code>toggle</code> - Specifies what event toggles an accordion
        key. Supports "click" and "hover"; the default is "click".
      </li>
    </ul>
  </article>

  <article>
    <h2 id="Badges">Badges</h2>

    <p>
      Badges provide quick visual identification for numeric values such as
      tallies. They should only be used for whole numbers and are best used
      for:
    </p>

    <ul>
      <li>After the name or label of a quantifiable thing.</li>
      <li>Notifying the user of unread messages or alerts.</li>
      <li>Unambiguously - they should be used singly, after a single item name.</li>
    </ul>

    <p>
      When a badge is empty - such as no unread items - badges will simply collapse
      (via CSS's <code>:empty</code> selector) if you leave it empty instead of
      displaying 0.
    </p>

    <i class="fa fa-bell fa-2x"></i>
    <dragline-badge>13</dragline-badge>
  </article>

  <article>
    <h2 id="Breadcrumbs">Breadcrumbs</h2>

    <p>
      Breadcrumbs indicate the current page's location within a navigational
      hierarchy. Breadcrumbs should only be used on sites with larger and more
      complex sitemaps with more than three levels deep of hierarchical
      content. Separators are added automatically using CSS's
      <code>:before</code> and <code>:after</code> selectors.
    </p>

    <dragline-breadcrumb>
      <li>Home</li>
      <li>Borrower</li>
      <li>Stats</li>
      <li>Query</li>
    </dragline-breadcrumb>
  </article>

  <article>
    <h2 id="ButtonGroups">Button Groups</h2>

    <p>
      Create button groups using the <code>Buttons</code> class. They group a
      series of buttons together on a single line or column. They should be used
      when all of the buttons in the group perform functionality on the same
      object.
    </p>

    <div class="Buttons">
      <button type="button">Left</button>
      <button type="button">Middle</button>
      <button type="button">Right</button>
    </div>

    <div class="Clear">
      <p></p>
    </div>

    <div class="Buttons-Vertical">
      <button type="button">Top</button>
      <button type="button">Middle</button>
      <button type="button">Bottom</button>
    </div>

    <h3 id="DropDownButtons">Button DropDowns</h3>

    <p>
      Create dropdown buttons with the <code>DropDown</code> class. Dropdown
      buttons should be used when there are multiple <em>similar</em> operations
      that can be performed on the same object. The button text should convey the
      underlying actions.
    </p>

    <p>
      When creating the menu, the menu items should be sorted in the order of their
      usage (e.g. highest-use menu items at the top and least-use menu items at the
      bottom). Create a separator for actions using the <code>Divider</code> class.
    </p>

    <div class="Buttons">
      <button type="button" class="DropDown" data-dropdown="#ulDropDownActions">Actions</button>
      <ul id="ulDropDownActions" class="DropDown">
        <li>
          <a href="#">Action #1</a>
        </li>
        <li>
          <a href="#">Action #2</a>
        </li>
        <li>
          <a href="#">Action #3</a>
        </li>
        <li class="Divider"></li>
        <li>
          <a href="#">Separate Action</a>
        </li>
      </ul>
    </div>

    <h3 id="Toolbars">Toolbars</h3>

    <p>
      Create toolbars using the <code>Toolbar</code> class. They organize button
      and input groups together; use them when you have multiple button/input
      groups that operate on the same object.
    </p>

    <div class="Toolbar">
      <div class="Buttons">
        <button type="button">
          <i class="fa fa-cut"></i>
        </button>
        <button type="button">
          <i class="fa fa-copy"></i>
        </button>
        <button type="button">
          <i class="fa fa-paste"></i>
        </button>
      </div>

      <div class="Buttons">
        <button type="button">
          <i class="fa fa-align-left"></i>
        </button>
        <button type="button">
          <i class="fa fa-align-center"></i>
        </button>
        <button type="button">
          <i class="fa fa-align-right"></i>
        </button>
        <button type="button">
          <i class="fa fa-align-justify"></i>
        </button>
      </div>

      <div class="Buttons">
        <button type="button">
          <i class="fa fa-bold"></i>
        </button>
        <button type="button">
          <i class="fa fa-italic"></i>
        </button>
        <button type="button">
          <i class="fa fa-underline"></i>
        </button>
        <button type="button">
          <i class="fa fa-subscript"></i>
        </button>
        <button type="button">
          <i class="fa fa-superscript"></i>
        </button>
      </div>

      <div class="Buttons">
        <button type="button">
          <i class="fa fa-indent"></i>
        </button>
        <button type="button">
          <i class="fa fa-dedent"></i>
        </button>
      </div>
    </div>
  </article>

  <article>
    <h2 id="Carousels">Carousels</h2>

    <p>
      Carousels are used to cycle through elements (typically images). They can be
      set with intervals so they act like timers, or manually scrolled through as
      the user clicks (or presses an arrow key). Carousels are best used for
      cycling through similar elements such as image galleries. They are also
      great for saving screen real estate when multiple images don't need to be
      displayed simultaneously on mobile devices. There should never be more than
      one carousel on a page.
    </p>

    <div id="divCarousel">
      <img src="~/images/memes/challenge-accepted.jpg" />
      <img src="~/images/memes/expecting-batmobile.jpg" />
      <img src="~/images/memes/grumpy-cat.jpg" />
      <img src="~/images/memes/jesus-facepalm.jpg" />
      <img src="~/images/memes/one-does-not-simply-fill-binders-with-women.jpg" />
      <img src="~/images/memes/test-in-production.jpg" />
      <img src="~/images/memes/what-if-i-told-you.jpg" />
    </div>

    <p>
      Creating a carousel requires JavaScript and applying <code>.Carousel()</code>
      to the target element. Options can be passed as an object per standard jQuery
      plugin convention.
    </p>

    <ul>
      <li>
        <strong>Direction:</strong> The direction the carousel slides. The default
        is for seats to slide right (or clockwise).
      </li>
      <li>
        <strong>Interval:</strong> The amount of time (in milliseconds) each seat
        is displayed before being rotated. The default is 5000 (5 seconds).
      </li>
      <li>
        <strong>PauseOnHover:</strong> Set to true to stop the carousel from
        sliding as long as the mouse sits over the carousel. The default is true.
      </li>
      <li>
        <strong>ShowIndicators:</strong> Set to true to show small "bubbles" at
        the lower-center portion of the carousel seats, which display where in
        the carousel it currently is, and allow users to click different "bubbles"
        to move directly to a different seat. The default is true.
      </li>
      <li>
        <strong>ShowNextPrevious:</strong> Set to true to show the next/previous
        indicators. The default is false.
      </li>
      <li>
        <strong>Wrap:</strong> Set to true to have the carousel wrap around, or
        false to have the carousel start and stop. The default is true.
      </li>
    </ul>
  </article>

  <article>
    <h2 id="CharacterCounter">Character Counter</h2>

    <p>
      Character counters tell users how many characters are left in a textbox. They
      should only be used with <code>&lt;textarea&gt;</code> elements, and only
      with <code>&lt;textarea&gt;</code> elements where users will realistically
      hit the character limit.
    </p>

    <p>
      Create a character counter by using the <code>data-counter</code> (which in
      this case does not require a value) and <code>for</code> attributes with a
      label in the location you want the counter to display. Options can be set
      using the <code>data-options</code> attribute.
    </p>

    <div class="Form-Group">
      <label>Limited Characters:</label>
      <textarea id="txtLimited" class="Width-25" maxlength="1000"></textarea>
      <label for="txtLimited" data-counter></label>
    </div>

    <ul>
      <li>
        <strong>Color:</strong> The text color of the character counter. The
        default is #008800.
      </li>
      <li>
        <strong>Danger:</strong> The color the text changes to when the user has
        less than one-quarter of the characters remaining. The default is #AA0000.
      </li>
      <li>
        <strong>Warning:</strong> The color the text changes to when the user has
        less than half of the characters remaining. The default is #FF7B00.
      </li>
    </ul>
  </article>

  <article>
    <h2 id="Meters">Meters</h2>

    <p>
      Meters (or gauges) repesent a scalar measurement within a known range, or a
      fractional value (e.g. disk usage, query result relevance, performance
      metrics, etc.) Unlike progress bars, meters provide minimum, maximum, and
      optimal values; a general rule of thumb when using meters is that min <=
      optimum <= max (if all are specified). Meters should never be used to
      report progress.
    </p>

    <div>
      <div>
        <label>Disk Usage</label>
      </div>

      <meter min="0" max="100" low="25" high="75" optimum="100" value="67"></meter>
    </div>

    <div>
      <div>
        <label>Memory Used</label>
      </div>

      <meter min="0" max="100" low="25" high="75" optimum="0" value="15"></meter>
    </div>

    <div>
      <div>
        <label>Network</label>
      </div>

      <meter min="0" max="100" low="25" high="75" optimum="100" value="13"></meter>
    </div>

    <div>
      <div>
        <label>CPU Utilization</label>
      </div>

      <meter min="0" max="100" low="25" high="85" optimum="75" value="13"></meter>
    </div>

    <h3 id="MultiMeters">Multi-Meters</h3>

    <p>
      Meters similar to those in iTunes and iOS for categorized utilization can
      be created using linear gradients for the <code>background</code> style.
    </p>

    <meter class="Categorized" min="0" max="100" low="25" high="85" optimum="75" value="75"></meter>
  </article>

  <article>
    <h2 id="Modals">Modal Dialogs</h2>

    <p>
      Modal dialogs are used to reveal information to a user that cannot be
      ignored, force a user to respond to a call of action, or show information to
      a user without losing the overall context of a page. Modal dialogs keep a
      user from interaction with the main page until the dialog has closed.
    </p>

    <p>
      Create a modal dialog by using the <code>data-modal</code> and
      <code>data-title</code> attributes with a button or hyperlink that triggers
      the display of the modal dialog. Options can be set using the
      <code>data-options</code> attribute.
    </p>

    <p>
      <button type="button" data-modal="#facePalm" data-title="Fail">Modal Dialog (Default)</button>
      <button type="button" data-modal="#facePalm" data-title="Fail" data-options="{ 'Effect': 'Newspaper' }">Modal Dialog (Newspaper)</button>
      <button type="button" data-modal="#facePalm" data-title="Fail" data-options="{ 'Effect': 'Fade' }">Modal Dialog (Fade)</button>
    </p>

    <ul>
      <li>
        <strong>CloseButton:</strong> Set to false to make a modal dialog only
        closable by an element within the dialog box. The default is true, which
        places a close button in the top right corner of the modal dialog box
        that users can click to close it.
      </li>
      <li>
        <strong>Effect:</strong> The effect used to toggle the display of the modal
        dialog. Options are: "Fade", "Fade And Scale", "Newspaper", "Slide From
        Bottom", "Slide From Left", "Slide From Right", and "Slide From Top". The
        default is "Slide From Top".
      </li>
    </ul>
  </article>

  <article>
    <h2 id="PasswordStrength">Password Strength</h2>

    <p>
      Password strength shows the user the strength of the password they want to
      use when creating an account or changing their password.
    </p>

    <p>
      Creating an accordion requires JavaScript and applying
      <code>.PasswordStrength()</code> to the target element. Options can be
      passed as an object per standard jQuery plugin convention.
    </p>

    <ul>
      <li>
        <strong>[Confirmation] Element:</strong> A selector (usually ID) to an
        <code>&lt;input&gt;</code> element used to re-enter the password.
      </li>
      <li>
        <strong>[Confirmation] InvalidCallback:</strong> A function called if
        the password is invalid.
      </li>
      <li>
        <strong>[Confirmation] ValidCallback:</strong> A function called if the
        password is valid.
      </li>
      <li>
        <strong>FairPattern:</strong> A regular expression used to determine if
        the password has fair strength. The default pattern requires at least 1
        alphanumeric character, 1 number, and the password must be at least 6
        characters long.
      </li>
      <li>
        <strong>GoodPattern:</strong> A regular expression used to determine if
        the password has good strength. The default pattern requires at least 1
        uppercase characer, 1 lowercase character, 1 number, and the password
        must be at least 8 characters long.
      </li>
      <li>
        <strong>StrongPattern:</strong> A regular expression used to determine if
        the password is strong. The default pattern requires at least 1 uppercase
        characer, 1 lowercase character, 1 number, 1 special character, and the
        password must be at least 8 characters long.
      </li>
    </ul>

    <div class="Form-Group">
      <input type="password" id="txtPassword" placeholder="Password" />
    </div>

    <div class="Form-Group">
      <input type="password" id="txtConfirmation" placeholder="Confirm password" />
    </div>
  </article>

  <article>
    <h2 id="ProgressBars">Progress Bars</h2>

    <p>
      Progress bars inform users that an application task is taking place and
      will take a predictable amount of time before finished. Progress bars
      should only be used with long running tasks in which the amount of time
      to complete is predictable.
    </p>

    <progress value="0.67"></progress>

    <h3 id="Indeterminate">Indeterminate Progress Bars</h3>

    <p>
      A progress bar with no <code>value</code> attribute is called an
      indeterminate progress bar. These are styled not to display at all; they
      should be avoided and replaced with a spinner.
    </p>

    <progress></progress>

    <h3 id="ProgressHtmlFallback">HTML Fallback</h3>

    <p>
      If supporting older browsers that don't support the progress bars, a simple
      fallback solution is to place a div with a span inside the
      <code>&lt;progress&gt;</code> element, which will be ignored by modern
      browsers, while the <code>&lt;progress&gt;</code> element will be ignored
      by older browsers.
    </p>

    <div class="ProgressBar">
      <span style="width: 80%;">80%</span>
    </div>
  </article>

  <article>
    <h2 id="Spinners">Spinners</h2>

    <p>
      Spinners inform users that an application task is taking place and the time
      until completion is not predictable. Spinners are also useful for tasks
      that will take only a few seconds because showing a progress bar is
      unnecessary.
    </p>

    <div class="Clear">
      <div class="Float-Left Width-20">
        <div class="Spinner">
          <div></div>
        </div>
      </div>

      <div class="Float-Left Width-20">
        <div class="Clock"></div>
      </div>

      <div class="Float-Left Width-20">
        <div class="Heartbeat"></div>
      </div>

      <div class="Float-Left Width-20">
        <div class="Wheel"></div>
      </div>
    </div>
  </article>

  <article>
    <h2 id="Toasts">Toasts</h2>

    <p>
      A toast provides simple feedback about an operation in a small popup that
      displays in the upper-right corner of the page. It only fills the amount of
      space required for the message and the current activity remains visible and
      interactive. Toasts automatically disappear after a timeout. They are more
      elegant than JavaScript alerts and ensure consistent look and feel across
      all browsers and operating systems. Toasts are the preferred method for
      alerting users (as opposed to JavaScript alerts).
    </p>

    <p>
      Toasty expects <code>&lt;toast&gt;</code> child elements that represent
      each toast alert.
    </p>

    <p>
      Toasty supports the following custom attributes:
    </p>

    <ul>
      <li>
        <code>max</code> - The maximum number of toasts to display. The default
        is unlimited. If set, toasts will not be created the number of visible
        toasts exceeds the attribute value.
      </li>
      <li>
        <code>acknowledge</code> - A boolean attribute applied to any
        <code>&lt;toast&gt;</code> element that specifies a user has
        acknowledged the toast.
      </li>
      <li>
        <code>sticky</code> - A boolean attribute applied to any
        <code>&lt;toast&gt;</code> element that denotes a toast that doesn't
        disappear (except for user acknowledgement).
      </li>
    </ul>

    <h3 id="ToastParameters">Add Parameters</h3>

    <p>
      When calling the <code>add()</code> method to create a new toast, the
      following parameters are passed as a JavaScript object.
    </p>

    <ul>
      <li>
        <code>Role:</code> The role of the toast. The default is none.
      </li>
      <li>
        <code>Dismissable:</code> Set to true to allow users to dismiss the
        toast. The default is false.
      </li>
      <li>
        <code>ImageUrl:</code> The URL of an image to display on the left
        side of the toast, which appears as an icon.
      </li>
      <li>
        <code>Sticky:</code> Set to true to make a toast not disappear after
        the configured timeout. The default is false, which causes the toast to
        disappear after the configured timeout.
      </li>
      <li>
        <code>Text:</code> The text of the toast.
      </li>
      <li>
        <code>Title:</code> The title displayed at the top of the toast.
      </li>
    </ul>

    <table>
      <thead>
        <tr>
          <th>Example</th>
          <th>Toast Role</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>
            <button id="btnToast">Default Alert</button>
          </td>
          <td>Default</td>
        </tr>
        <tr>
          <td>
            <button id="btnDismissable">Dismissable Alert</button>
          </td>
          <td>
            Dismissable. By default toasts only disappear after the timeout
            configured when the plugin was instantiated. Dismissable toasts
            have a button in their upper-right corner that allows them to
            be closed by users.
          </td>
        </tr>
        <tr>
          <td>
            <button id="btnError">Error Alert</button>
          </td>
          <td>Error</td>
        </tr>
        <tr>
          <td>
            <button id="btnImage">Alert With Image</button>
          </td>
          <td></td>
        </tr>
        <tr>
          <td>
            <button id="btnInformational">Informational Alert</button>
          </td>
          <td>Informational</td>
        </tr>
        <tr>
          <td>
            <button id="btnLight">Light Alert</button>
          </td>
          <td>Light</td>
        </tr>
        <tr>
          <td>
            <button id="btnRemoveAll">Remove All</button>
          </td>
          <td></td>
        </tr>
        <tr>
          <td>
            <button id="btnSticky">Sticky Alert</button>
          </td>
          <td></td>
        </tr>
        <tr>
          <td>
            <button id="btnSuccess">Success Alert</button>
          </td>
          <td>Success</td>
        </tr>
        <tr>
          <td>
            <button id="btnWarning">Warning Alert</button>
          </td>
          <td>Warning</td>
        </tr>
      </tbody>
    </table>

    <h3 id="ToastRemoval">Removal</h3>

    <p>
      Remove a single toast by calling the <code>remove()</code> method and
      passing it the ID of a toast. Alternatively, all toasts can be removed by
      calling the <code>removeAll()</code> method.
    </p>
  </article>
</div>

<dragline-toasty></dragline-toasty>

<script type="text/javascript">
  window.addEventListener("DOMContentLoaded", function()
  {
    var toasty = document.getElementsByTagName("dragline-toasty")[0];

    document.getElementById("btnToast").addEventListener("click", function()
    {
      toasty.add({ Title: "Default Toast", Text: "This is a toast alert. It will disappear after 5 seconds." });
    });
    document.getElementById("btnDismissable").addEventListener("click", function()
    {
      toasty.add({ Title: "Dismissable Toast", Text: "This is a toast alert. It will disappear after 5 seconds.", Dismissable: true });
    });
    document.getElementById("btnError").addEventListener("click", function()
    {
      toasty.add({ Title: "Error", Text: "This is a toast alert. It will disappear after 5 seconds.", Role: "Error" });
    });
    document.getElementById("btnImage").addEventListener("click", function()
    {
      toasty.add({ Title: "Image Toast", Text: "This is a toast alert. It will disappear after 5 seconds.", ImageUrl: "http://findicons.com/files/icons/1036/function/48/warning.png" });
    });
    document.getElementById("btnInformational").addEventListener("click", function()
    {
      toasty.add({ Title: "Information", Text: "This is a toast alert. It will disappear after 5 seconds.", Role: "Information" });
    });
    document.getElementById("btnLight").addEventListener("click", function()
    {
      toasty.add({ Title: "Light Toast", Text: "This is a toast alert. It will disappear after 5 seconds.", Role: "Light" });
    });
    document.getElementById("btnSticky").addEventListener("click", function()
    {
      toasty.add({ Title: "Sticky Toast", Text: "This is a toast alert. It will disappear after 5 seconds.", Sticky: true });
    });
    document.getElementById("btnSuccess").addEventListener("click", function()
    {
      toasty.add({ Title: "Success", Text: "This is a toast alert. It will disappear after 5 seconds.", Role: "Success" });
    });
    document.getElementById("btnWarning").addEventListener("click", function()
    {
      toasty.add({ Title: "Warning", Text: "This is a toast alert. It will disappear after 5 seconds.", Role: "Warning" });
    });
    document.getElementById("btnRemoveAll").addEventListener("click", function()
    {
      toasty.removeAll();
    });
  });
</script>

<script type="text/html" id="facePalm">
  <div class="Text-Center">
    <img src="/images/memes/jesus-facepalm.jpg" />
  </div>
</script>
