@{
  ViewBag.Title = "AdapTable Helper Unit Tests";
}

@section Styles
{
  <link type="text/css" rel="stylesheet" href="~/css/adaptable.css" />
  <link rel="stylesheet" href="//code.jquery.com/qunit/qunit-1.15.0.css" />
}

@section Scripts
{
  <script type="text/javascript" src="//code.jquery.com/qunit/qunit-1.16.0.js"></script>
  <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/blanket.js/1.1.4/blanket.min.js"></script>
  <script type="text/javascript" src="~/scripts/jQuery/adaptable.js"></script>
  <script type="text/javascript" src="~/scripts/jQuery/adaptable/helpers.js" data-cover></script>
  <script type="text/javascript" src="~/scripts/jQuery/adaptable/state.js"></script>
}

<div id="qunit"></div>

<table id="tblAdapTable" class="Hot-Tracking">
  <thead>
    <tr>
      <th>Type</th>
      <th>Breed</th>
      <th>Name</th>
      <th>How Acquired</th>
      <th>Acquisition Date</th>
      <th>Acquisition Age</th>
      <th>Acquisition Price</th>
      <th>Loss Date</th>
      <th>Loss Reason</th>
      <th>
        <i class="fa fa-cog" style="cursor: pointer;" />
      </th>
    </tr>
  </thead>
  <tbody data-bind="foreach: Pets">
    <tr>
      <td data-bind="text: Type"></td>
      <td data-bind="text: Breed"></td>
      <td data-bind="text: Name"></td>
      <td data-bind="text: $data['How Acquired']"></td>
      <td class="Text-Right" data-bind="text: $data['Acquisition Date'].toDateString()"></td>
      <td class="Text-Right" data-bind="text: $data['Acquisition Age']"></td>
      <td class="Text-Right" data-bind="text: $data['Acquisition Price']"></td>
      <td class="Text-Right" data-bind="text: $data['Loss Date'].toDateString()"></td>
      <td data-bind="text: $data['Loss Reason']"></td>
      <td>
        <i class="fa fa-cog" style="cursor: pointer;" />
      </td>
    </tr>
  </tbody>
</table>

<script type="text/javascript">
  var Setup =
  {
    Pets:
    [
      { "Type": "Lizard", "Breed": "Water Dragon", "Name": "Leviathan", "Acquisition Date": new Date("6/10/1993"), "Acquisition Age": .5, "How Acquired": "Purchased", "Acquisition Price": 40, "Loss Date": new Date("8/12/1998"), "Loss Reason": "Sold" },
      { "Type": "Dog", "Breed": "Rotweiler", "Name": "Hercules", "Acquisition Date": new Date("1/5/1993"), "Acquisition Age": 0.5, "How Acquired": "Purchased", "Acquisition Price": 600, "Loss Date": new Date("9/1/1998"), "Loss Reason": "Put down by step mom" },
      { "Type": "Dog", "Breed": "Rotweiler", "Name": "Mel", "Acquisition Date": new Date("4/2/1994"), "Acquisition Age": 0.5, "How Acquired": "Daughter of Hercules", "Acquisition Price": 0, "Loss Date": new Date("9/1/1998"), "Loss Reason": "Put down by step mom" },
      { "Type": "Scorpion", "Breed": "Emperor", "Name": "Sting", "Acquisition Date": new Date("11/4/1994"), "Acquisition Age": 1, "How Acquired": "Purchased", "Acquisition Price": 34.99, "Loss Date": new Date("4/10/1995"), "Loss Reason": "Black Widows" },
      { "Type": "Cat", "Breed": "Unknown", "Name": "Chocolate", "Acquisition Date": new Date("5/3/1998"), "Acquisition Age": 1, "How Acquired": "Found", "Acquisition Price": 0, "Loss Date": new Date("6/19/2012"), "Loss Reason": "Old Age" },
      { "Type": "Lizard", "Breed": "Asian Water Monitor", "Name": "Vincent", "Acquisition Date": new Date("6/6/1999"), "Acquisition Age": 0.5, "How Acquired": "Purchased", "Acquisition Price": 119.99, "Loss Date": new Date("5/20/2001"), "Loss Reason": "Ex-girlfriend let out" },
      { "Type": "Lizard", "Breed": "Leopard Gecko", "Name": "Phallic", "Acquisition Date": new Date("10/12/1999"), "Acquisition Age": 0.5, "How Acquired": "Purchased", "Acquisition Price": 29.99, "Loss Date": new Date("4/23/2012"), "Loss Reason": "Black Widows" },
      { "Type": "Lizard", "Breed": "Leopard Gecko", "Name": "Snarky", "Acquisition Date": new Date("10/12/1999"), "Acquisition Age": 0.5, "How Acquired": "Purchased", "Acquisition Price": 29.99, "Loss Date": new Date("4/23/2012"), "Loss Reason": "Black Widows" },
      { "Type": "Lizard", "Breed": "Leopard Gecko", "Name": "Twitch", "Acquisition Date": new Date("10/12/1999"), "Acquisition Age": 0.5, "How Acquired": "Purchased", "Acquisition Price": 29.99, "Loss Date": new Date("4/23/2012"), "Loss Reason": "Black Widows" },
      { "Type": "Ferret", "Breed": "", "Name": "Hoppy", "Acquisition Date": new Date("6/20/2000"), "Acquisition Age": 3, "How Acquired": "Given", "Acquisition Price": 0, "Loss Date": new Date("5/13/2001"), "Loss Reason": "Given away" },
      { "Type": "Ferret", "Breed": "", "Name": "Klepty", "Acquisition Date": new Date("6/20/2000"), "Acquisition Age": 3, "How Acquired": "Given", "Acquisition Price": 0, "Loss Date": new Date("5/13/2001"), "Loss Reason": "Given away" },
      { "Type": "Lizard", "Breed": "Double Crested Green Basilisk", "Name": "Dumbass", "Acquisition Date": new Date("9/13/2001"), "Acquisition Age": 0.5, "How Acquired": "Purchased", "Acquisition Price": 149.99, "Loss Date": new Date("1/28/2003"), "Loss Reason": "Died" },
      { "Type": "Cat", "Breed": "Smoosh Face Tabby", "Name": "Clyde", "Acquisition Date": new Date("10/20/2002"), "Acquisition Age": 4, "How Acquired": "Adopted", "Acquisition Price": 120, "Loss Date": new Date("2/1/2003"), "Loss Reason": "Given back" },
      { "Type": "Cat", "Breed": "Black Tabby", "Name": "Calysto", "Acquisition Date": new Date("10/20/2002"), "Acquisition Age": 4, "How Acquired": "Adopted", "Acquisition Price": 120, "Loss Date": new Date("2/1/2003"), "Loss Reason": "Given back" },
      { "Type": "Bird", "Breed": "Eclectus", "Name": "Xanth", "Acquisition Date": new Date("4/13/2003"), "Acquisition Age": 1, "How Acquired": "Purchased", "Acquisition Price": 1099, "Loss Date": new Date("8/19/2004"), "Loss Reason": "Given away" },
      { "Type": "Cat", "Breed": "Unknown", "Name": "Jaz", "Acquisition Date": new Date("7/13/2003"), "Acquisition Age": 3, "How Acquired": "Adopted", "Acquisition Price": 120, "Loss Date": new Date("9/9/2004"), "Loss Reason": "Put down due to IBD" },
      { "Type": "Bird", "Breed": "Greenwing Macaw", "Name": "Trixy", "Acquisition Date": new Date("2/20/2005"), "Acquisition Age": 0.5, "How Acquired": "Purchased", "Acquisition Price": 1300, "Loss Date": new Date(""), "Loss Reason": "" },
      { "Type": "Lizard", "Breed": "Madagascar Crested Gecko", "Name": "Leather", "Acquisition Date": new Date("11/3/2006"), "Acquisition Age": 1, "How Acquired": "Purchased", "Acquisition Price": 39.99, "Loss Date": new Date("4/23/2012"), "Loss Reason": "Black Widows" },
      { "Type": "Lizard", "Breed": "Madagascar Crested Gecko", "Name": "Suede", "Acquisition Date": new Date("11/3/2006"), "Acquisition Age": 1, "How Acquired": "Purchased", "Acquisition Price": 0, "Loss Date": new Date("4/23/2012"), "Loss Reason": "Black Widows" },
      { "Type": "Lizard", "Breed": "Madagascar Crested Gecko", "Name": "Tailless", "Acquisition Date": new Date("11/3/2006"), "Acquisition Age": 1, "How Acquired": "Purchased", "Acquisition Price": 0, "Loss Date": new Date("5/30/2012"), "Loss Reason": "Let go" },
      { "Type": "Snake", "Breed": "Boa Constrictor", "Name": "Knot", "Acquisition Date": new Date("2/4/2007"), "Acquisition Age": 0.5, "How Acquired": "Purchased", "Acquisition Price": 89.99, "Loss Date": new Date("5/5/2012"), "Loss Reason": "Sold" },
      { "Type": "Lizard", "Breed": "Australian Frilled Dragon", "Name": "Zeal", "Acquisition Date": new Date("10/5/2008"), "Acquisition Age": 1, "How Acquired": "Purchased", "Acquisition Price": 99.98, "Loss Date": new Date("4/23/2012"), "Loss Reason": "Black Widows" },
      { "Type": "Cat", "Breed": "Silver Bengal", "Name": "Phoebe", "Acquisition Date": new Date("3/3/2010"), "Acquisition Age": 0.5, "How Acquired": "Purchased", "Acquisition Price": 500, "Loss Date": new Date("4/30/2012"), "Loss Reason": "Gave away" },
      { "Type": "Snake", "Breed": "Ball Python", "Name": "Morningstar", "Acquisition Date": new Date("3/9/2010"), "Acquisition Age": 4, "How Acquired": "Purchased", "Acquisition Price": 129.99, "Loss Date": new Date("4/23/2012"), "Loss Reason": "Black Widows" },
      { "Type": "Cat", "Breed": "[F1] Savannah", "Name": "Ragnarok", "Acquisition Date": new Date("9/13/2011"), "Acquisition Age": 1.5, "How Acquired": "Purchased", "Acquisition Price": 400, "Loss Date": new Date(""), "Loss Reason": "" }
    ],
    ViewModel:
    {
      Pets: ko.observable([])
    },

    calculateAggregates: function()
    {
      var aggregates = {};
      var groupedValues = {};

      for (var petIndex = 0; petIndex < this.Pets.length; petIndex++)
      {
        if (!groupedValues[this.Pets[petIndex].Type])
          groupedValues[this.Pets[petIndex].Type] = {};

        for (var property in this.Pets[petIndex])
        {
          if (typeof (this.Pets[petIndex][property]) === "number")
          {
            if (!groupedValues[this.Pets[petIndex].Type][property])
              groupedValues[this.Pets[petIndex].Type][property] = [];

            groupedValues[this.Pets[petIndex].Type][property].push(this.Pets[petIndex][property]);
          }
        }
      }

      for (var type in groupedValues)
      {
        aggregates[type] = {};

        for (var property in groupedValues[type])
        {
          aggregates[type][property] = 0;

          for (var valueIndex = 0; valueIndex < groupedValues[type][property].length; valueIndex++)
            aggregates[type][property] += groupedValues[type][property][valueIndex];

          aggregates[type][property] /= groupedValues[type][property].length;
        }
      }

      return aggregates;
    },

    determineIfGroupable: function(property)
    {
      switch (property)
      {
        case "Name":
        case "Acquisition Date":
        case "Acquisition Price":
        case "Loss Date":
          return false;
        default:
          return true;
      }
    },

    determineIfHidable: function(property)
    {
      if (property === "Name" || property === "Type")
        return false;
      else
        return true;
    },

    determineIfSortable: function(property)
    {
      if (property === "Loss Reason")
        return false;
      else
        return true;
    },

    getColumns: function()
    {
      var columns = [];

      for (var property in this.Pets[0])
      {
        columns.push(
        {
          "Aggregate": typeof (this.Pets[0][property]) === "number" ? "Average" : "None",
          "DataType": this.getDataType(this.Pets[0][property]),
          "Header": property,
          "IsFilterable": true,
          "IsGroupable": this.determineIfGroupable(property),
          "IsHidable": this.determineIfHidable(property),
          "IsMovable": true,
          "IsSortable": this.determineIfSortable(property),
          "IsVisible": true,
          "Name": property.replace(" ", "")
        });
      }

      columns.push({ "Aggregate": "None", "DataType": "None", "Header": null, "IsFilterable": false, "IsGroupable": false, "IsHidable": false, "IsMovable": false, "IsSortable": false, "IsVisible": true, "Name": null });

      return columns;
    },

    getDataType: function(value)
    {
      switch (typeof (value))
      {
        case "string":
          return "String";
        case "number":
          return "Numeric";
        default:
          if (value.getDate)
            return "Timestamp";
          else
            return "None";
      }
    },

    getFilterValues: function()
    {
      var filterValues = {};

      for (var property in this.Pets)
      {
        filterValues[property] = [];

        for (var petIndex = 0; petIndex < this.Pets.length; petIndex++)
        {
          if (filterValues[property].indexOf(this.Pets[petIndex][property]) < 0)
            filterValues[property].push(this.Pets[petIndex][property]);
        }
      }
    },

    getPagesOfData: function()
    {
      var pages = [];

      for (var pageIndex = 0; pageIndex < this.Pets.length / 10; pageIndex++)
      {
        pages.push(
        {
          "Items": Setup.Pets.slice((pageIndex * 10), ((pageIndex + 1) * 10))
        });
      }

      return pages;
    }
  };

  // Setup some cached data
  var AdapTableCache = { Instances: [] };
  var AdapTableInstance = {};
  AdapTableInstance.Layout = {};
  AdapTableInstance.Layout.Columns = Setup.getColumns();
  AdapTableInstance.Layout.Query = { "Filters": [], "Groups": ["Type"], "PageSize": 10, "PageIndex": 0, "Sort": "Acquisition Date", "SortDirection": null };
  AdapTableInstance.Data = {};
  AdapTableInstance.Data.Aggregates = Setup.calculateAggregates();
  AdapTableInstance.Data.FilterValues = Setup.getFilterValues();
  AdapTableInstance.Data.TotalItems = Setup.Pets.length;
  AdapTableInstance.Data.Pages = Setup.getPagesOfData();
  AdapTableCache.Instances.push(AdapTableInstance);
  localStorage.setItem("AdapTable: " + document.location, JSON.stringify(AdapTableCache));

  QUnit.test("AdapTable Helper: addActionButton", function(assert)
  {
    // Arrange
    var waitForDom = assert.async();
    var tooltip = "This is an anchor icon.";
    var callbackExecuted = false;
    var tblAdapTable = $("#tblAdapTable");
    var ViewModel =
    {
      Employees: ko.observable(AdapTableInstance.Data.Pages[0])
    };

    ko.applyBindings(ViewModel, tblAdapTable[0]);
    localStorage.clear();

    tblAdapTable.AdapTable(
    {
      CanChangeView: false,
      CanFilter: false,
      CanGroup: false,
      CanMoveColumns: false,
      CanSearch: false,
      CanSort: false
    });

    // Act
    window.setTimeout(function()
    {
      tblAdapTable.AdapTable("addActionButton", "fa-anchor", tooltip, function()
      {
        callbackExecuted = true;
      });

      // Assert
      var anchorIcon = tblAdapTable.prev().find("i.fa-anchor");
      assert.equal(anchorIcon.prop("tagName").toUpperCase(), "I");
      assert.equal(anchorIcon.length, 1);
      assert.equal(anchorIcon.attr("title"), tooltip);

      anchorIcon.trigger("click");
      assert.ok(callbackExecuted);

      waitForDom();
    }, 1000);
  });

  QUnit.test("AdapTable Helper: bubbleArrayElements Right-to-Left", function(assert)
  {
    // Arrange
    var tblAdapTable = $("#tblAdapTable");
    var array = [0, 1, 2, 3, 4, 5, 6];
    var expected = [0, 1, 2, 4, 3, 5, 6];

    // Act
    tblAdapTable.AdapTable("bubbleArrayElements", array, 4, 3);

    // Assert
    assert.deepEqual(array, expected);
  });

  QUnit.test("AdapTable Helper: bubbleArrayElements Left-to-Right", function(assert)
  {
    // Arrange
    var tblAdapTable = $("#tblAdapTable");
    var array = [0, 1, 2, 3, 4, 5, 6];
    var expected = [0, 1, 2, 4, 3, 5, 6];

    // Act
    tblAdapTable.AdapTable("bubbleArrayElements", array, 3, 4);

    // Assert
    assert.deepEqual(array, expected);
  });

  QUnit.test("AdapTable Helper: bubbleArrayElements Right-to-Left 2+", function(assert)
  {
    // Arrange
    var tblAdapTable = $("#tblAdapTable");
    var array = [0, 1, 2, 3, 4, 5, 6];
    var expected = [0, 5, 1, 2, 3, 4, 6];

    // Act
    tblAdapTable.AdapTable("bubbleArrayElements", array, 5, 1);

    // Assert
    assert.deepEqual(array, expected);
  });

  QUnit.test("AdapTable Helper: bubbleArrayElements Left-to-Right 2+", function(assert)
  {
    // Arrange
    var tblAdapTable = $("#tblAdapTable");
    var array = [0, 1, 2, 3, 4, 5, 6];
    var expected = [0, 2, 3, 4, 5, 1, 6];

    // Act
    tblAdapTable.AdapTable("bubbleArrayElements", array, 1, 5);

    // Assert
    assert.deepEqual(array, expected);
  });

  QUnit.test("AdapTable Helper: bubbleArrayElements Right-to-Left Left-Edge", function(assert)
  {
    // Arrange
    var tblAdapTable = $("#tblAdapTable");
    var array = [0, 1, 2, 3, 4, 5, 6];
    var expected = [5, 0, 1, 2, 3, 4, 6];

    // Act
    tblAdapTable.AdapTable("bubbleArrayElements", array, 5, 0);

    // Assert
    assert.deepEqual(array, expected);
  });

  QUnit.test("AdapTable Helper: bubbleArrayElements Right-to-Left Both Edges", function(assert)
  {
    // Arrange
    var tblAdapTable = $("#tblAdapTable");
    var array = [0, 1, 2, 3, 4, 5, 6];
    var expected = [6, 0, 1, 2, 3, 4, 5];

    // Act
    tblAdapTable.AdapTable("bubbleArrayElements", array, 6, 0);

    // Assert
    assert.deepEqual(array, expected);
  });

  QUnit.test("AdapTable Helper: bubbleArrayElements Left-to-Right Right-Edge", function(assert)
  {
    // Arrange
    var tblAdapTable = $("#tblAdapTable");
    var array = [0, 1, 2, 3, 4, 5, 6];
    var expected = [0, 2, 3, 4, 5, 6, 1];

    // Act
    tblAdapTable.AdapTable("bubbleArrayElements", array, 1, 6);

    // Assert
    assert.deepEqual(array, expected);
  });

  QUnit.test("AdapTable Helper: bubbleArrayElements Left-to-Right Both Edges", function(assert)
  {
    // Arrange
    var tblAdapTable = $("#tblAdapTable");
    var array = [0, 1, 2, 3, 4, 5, 6];
    var expected = [1, 2, 3, 4, 5, 6, 0];

    // Act
    tblAdapTable.AdapTable("bubbleArrayElements", array, 0, 6);

    // Assert
    assert.deepEqual(array, expected);
  });

  QUnit.test("AdapTable Helper: findColumn By Header", function(assert)
  {
    // Arrange
    var expected = AdapTableInstance.Layout.Columns[0];
    var tblAdapTable = $("#tblAdapTable");
    localStorage.clear();

    tblAdapTable.AdapTable(
    {
      CanChangeView: false,
      CanFilter: false,
      CanGroup: false,
      CanMoveColumns: false,
      CanSearch: false,
      CanSort: false
    });

    tblAdapTable.data("Layout", AdapTableInstance.Layout);

    // Act
    var column = tblAdapTable.AdapTable("findColumn", "Header", "First Name");

    // Assert
    assert.equal(column, expected);
  });

  QUnit.test("AdapTable Helper: findColumn By Name", function(assert)
  {
    // Arrange
    var expected = AdapTableInstance.Layout.Columns[0];
    var tblAdapTable = $("#tblAdapTable");
    localStorage.clear();

    tblAdapTable.AdapTable(
    {
      CanChangeView: false,
      CanFilter: false,
      CanGroup: false,
      CanMoveColumns: false,
      CanSearch: false,
      CanSort: false
    });

    tblAdapTable.data("Layout", AdapTableInstance.Layout);

    // Act
    var column = tblAdapTable.AdapTable("findColumn", "Name", "FirstName");

    // Assert
    assert.equal(column, expected);
  });

  QUnit.test("AdapTable Helper: toggleMenu", function(assert)
  {
    // Arrange
    var waitForDom = assert.async();
    var expected = AdapTableInstance.Layout.Columns[0];
    var tblAdapTable = $("#tblAdapTable");
    var navMenu = $("#navMenu");
    var fakeClickEvent = $.Event("click");
    fakeClickEvent.target = tblAdapTable[0];
    localStorage.clear();

    tblAdapTable.AdapTable(
    {
      CanChangeView: false,
      CanFilter: false,
      CanGroup: false,
      CanMoveColumns: false,
      CanSearch: false,
      CanSort: false
    });

    window.setTimeout(function()
    {
      // Act
      tblAdapTable.AdapTable("toggleMenu", fakeClickEvent, navMenu);

      // Assert
      var adaptable = tblAdapTable.data("AdapTable");
      assert.ok(adaptable.Menu.is(":visible"));

      tblAdapTable.AdapTable("toggleMenu", fakeClickEvent);

      assert.ok(!adaptable.Menu.is(":visible"));

      waitForDom();
    }, 1000);
  });
</script>